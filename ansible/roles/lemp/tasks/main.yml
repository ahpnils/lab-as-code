- name: install Python deps
  package: 
    name: "python3-PyMySQL"
    state: present

- name: Create base web directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
    follow: no
    force: yes
  loop:
    - "{{ www_base }}"
    - "{{ docroot }}"
    - "{{ www_log_dir }}"
    - "{{ www_tmp_dir }}"

- name: Create groups for web users
  group:
    name: "{{ item.name }}"
    gid: "{{ item.uid }}"
    state: present
  with_items: "{{ sites }}"
  tags:
    - users
  #no_log: "{{ ansible_verbosity < 3 }}"

- name: Create web users and home directories
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    group: "{{ item.name }}"
    shell: "/sbin/nologin"
    home: "/srv/www/{{ item.fqdn }}"
    comment: "system user for website {{ item.fqdn }}"
    state: present
  with_items: "{{ sites }}"
  tags:
    - users
  #no_log: "{{ ansible_verbosity < 3 }}"

- name: Adjust home directories modes so Nginx can go through
  file:
    path: "/srv/www/{{ item.fqdn }}/"
    state: directory
    mode: 0750
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  loop: "{{ sites }}"
  tags:
    - users

- name: Create web directories
  file:
    path: "/srv/www/{{ item.0.fqdn }}/{{ item.1 }}"
    state: directory
    mode: 0750
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
  with_nested:
    - "{{ sites }}"
    - "{{ webdirs }}"
  tags:
    - users
  #no_log: "{{ ansible_verbosity < 3 }}"

- name: SELinux - Allow Nginx to read files in www_base
  community.general.sefcontext:
    target: "{{ item }}"
    setype: httpd_sys_content_t
    state: present
  loop:
    - '{{ www_base }}'
    - '{{ docroot }}'
    - '{{ www_tmp_dir }}'
  tags:
    - selinux 

- name: SELinux - Allow Nginx to write log files in www_log_dir
  community.general.sefcontext:
    target: "/srv/www/{{ item.0.fqdn }}/log/{{ item.1 }}"
    setype: httpd_log_t
    state: present
  with_nested:
    - "{{ sites }}"
    - [
      "access.log",
      "error.log",
      ]
  tags:
    - selinux 

- name: SELinux - Apply file context
  ansible.builtin.command: restorecon -irv "/srv/www/{{ item.fqdn }}"
  register: modified_context
  changed_when: modified_context.stdout != ""
  with_items: "{{ sites }}"
  tags:
    - selinux 

- name: SELinux - Allow Nginx/PHP to connect to a database
  ansible.posix.seboolean:
    name: httpd_can_network_connect_db
    state: yes
    persistent: yes
  tags:
    - selinux 

- name: install Nginx from OS repos
  import_role:
    name: nginxinc.nginx_core.nginx
  vars:
    nginx_manage_repo: false
    nginx_install_from: os_repository
    nginx_enable: true
    nginx_start: true

- name: Create Custom Nginx configurations
  import_role:
    name: nginxinc.nginx_core.nginx_config
  vars:
    #nginx_config_debug_output: true # temporary
    nginx_config_http_template_enable: true
    nginx_config_http_template:
      - template_file: http/default.conf.j2
        deployment_location: /etc/nginx/conf.d/000_catchall.conf
        backup: false
        config:
         servers:
           - core:
               listen:
                 - port: 80
               server_name: _
             log:
               access:
                 - path: "{{ www_log_dir }}/access.log"
               error:
                 - file: "{{ www_log_dir }}/error.log"
             locations:
               - location: /
                 core:
                   index: index.html
                   root: "{{ docroot }}"
  notify: restart nginx
  tags:
    - nginx

- name: Add Nginx user to websites groups
  ansible.builtin.user:
    name: nginx
    groups: "{{ item.name }}"
    append: yes
  loop: "{{ sites }}"
  tags:
    - nginx
    - users

- name: Create Websites Nginx configurations
  include_role:
    name: nginxinc.nginx_core.nginx_config
  loop_control:
    loop_var: site
  loop: "{{ sites }}"
  vars:
    nginx_config_http_template_enable: true
    nginx_config_http_template:
      - template_file: http/default.conf.j2
        deployment_location: "/etc/nginx/conf.d/{{ site.fqdn }}.conf"
        backup: false
        config:
         servers:
           - core:
               listen:
                 - port: 80
               server_name: "{{ site.fqdn }} www.{{ site.fqdn }}"
             log:
               access:
                 - path: "/srv/www/{{ site.fqdn }}/log/access.log"
               error:
                 - file: "/srv/www/{{ site.fqdn }}/log/error.log"
             locations:
               - location: /
                 core:
                   index: index.html index.php
                   root: "/srv/www/{{ site.fqdn }}/public/"
               - location: ~ \.php$
                 core:
                   root: "/srv/www/{{ site.fqdn }}/public/"
                 # These custom directives are for PHP-enabled websites.
                 # They are included even if PHP is disabled, but this should not
                 # be a big issue since there will be no PHP-FPM pool to answer.
                 custom_directives:
                   #- "fastcgi_split_path_info ^(.+\.php)(/.+)$;"
                   - "fastcgi_pass unix:/var/run/php-fpm/fpm-{{ site.name }}.sock;"
                   - "fastcgi_index index.php;"
                   - "include fastcgi_params;"
                   - "fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;"

    notify: restart nginx
  tags:
    - nginx

- name: configure FPM pools
  include_role:
    name: geerlingguy.php
  loop_control:
    loop_var: site
  loop: "{{ sites }}"
  when:
    - site.php == true
  vars:
    php_fpm_pools:
      - pool_name: "{{ site.name }}"
        pool_template: www.conf.j2
        pool_listen: "/var/run/php-fpm/fpm-{{ site.name }}.sock"
        # php_fpm_pool_user and php_fpm_pool_group are set to
        # $pool in vars/main.yml
        pool_pm: ondemand
        pool_pm_max_children: 5
    notify: restart php-fpm
  tags:
    - php_fpm

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: "{{ site.name }}"
    verbosity: 2
  loop_control:
    loop_var: site
  loop: "{{ sites }}"
  tags:
    - php_fpm

- name: install MySQL from Jeff Geerling
  include_role:
    name: geerlingguy.mysql
  loop_control:
    loop_var: site
  loop: "{{ sites }}"
  when:
    - site.mysql == true
  vars:
    mysql_databases:
      - name: "{{ site.name }}"
    mysql_users:
      - name: "{{ site.name }}"
        password: "{{ site.mypasswd }}"
        priv: "{{ site.name }}.*:ALL PRIVILEGES"
  tags:
    - mysql
